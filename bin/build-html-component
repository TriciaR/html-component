#!/usr/bin/env node --use_strict
const fs = require('fs')
const hogan = require('hogan.js')
const scopeCss = require('scope-css')
const postcss  = require('postcss')
const autoprefixer = require('autoprefixer')
const babel = require('babel-core')

const inputDir = 'html'
const outputDir = 'build'

var templates = {}
var styles = {}
var scripts = {}

fs.readdirSync(inputDir).forEach(file => {
  var comp = fs.readFileSync(`./${inputDir}/${file}`).toString()

  var name = file.replace('.html', '')
  templates[name] = extractTagContent(comp, 'template')
  styles[name] = extractTagContent(comp, 'style')
  scripts[name] = extractTagContent(comp, 'script')
})

writeFile('templates.js', compileTemplates(templates))
writeFile('styles.css', prefixStyles(scopeStyles(styles)))
writeFile('scripts.js', transpileScripts(scripts))

// ______________________________________________________________________

function writeFile(name, content) {
  fs.writeFileSync(`./${outputDir}/${name}`, content, 'utf8')
}

function extractTagContent(html, tag) {
  var match = html.match("\<"+tag+"\>(.|\n)*?\<\/"+tag+"\>")
  if (!match) return null;
  return match[0].replace(new RegExp("<\/?"+tag+">", "g"), '').trim()
}

function compileTemplates(templates) {
  var output = 'window.templates = {};'
  for(var name in templates) {
    var template = templates[name]
    if (!template) continue
    var compiled = hogan.compile(template, { asString: 1 })
    output += `\ntemplates['${name}'] = new Hogan.Template(${compiled});`
  }
  return output
}

function scopeStyles(styles) {
  var output = ''
  for(var name in styles) {
    var style = styles[name]
    if (!style) continue
    output += '\n' + scopeCss(style, name)
  }
  return output
}

function prefixStyles(styleString) {
  return postcss([autoprefixer]).process(styleString).css
}

function transpileScripts(scripts) {
  var output = ''
  var babelOptions = { presets: [ 'es2015' ], plugins: [ 'iife-wrap' ] }
  for(var name in scripts) {
    var script = scripts[name]
    var compiled = babel.transform(script, babelOptions).code
    output += '\n' + compiled
  }
  return output
}
