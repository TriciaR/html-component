#!/usr/bin/env node --use_strict
const fs = require('fs')
const hogan = require('hogan.js')
const scopeCss = require('scope-css')
const postcss  = require('postcss')
const postcssNext = require('postcss-cssnext')
const babel = require('babel-core')
const cheerio = require('cheerio')
const changeCase = require('change-case')

const inputDir = 'src'
const outputDir = 'dist'

var templates = {}
var styles = {}
var scripts = {}

console.time('Build process')

fs.readdirSync(inputDir).forEach(file => {
  if (!file.match('.html')) return

  var html = fs.readFileSync(`./${inputDir}/${file}`).toString()

  var $ = cheerio.load(html)
  var name = $('template').attr('id') || file.replace('.html', '')

  var style = $('style').html()
  if ($('style').parents('template').length) {
    style = scopeCss(style, name)
  }

  styles[name] = style
  templates[name] = $('template').find('style').remove().end().html()
  scripts[name] = $('script').html()
})

writeFile('templates.js', compileTemplates(templates))
writeFile('components.css', cssNext(styles))
writeFile('components.js', transpileScripts(scripts))

console.timeEnd('Build process')

// ______________________________________________________________________

function writeFile(name, content) {
  fs.writeFileSync(`./${outputDir}/${name}`, content, 'utf8')
}

function compileTemplates(templates) {
  var output = 'HTMLComponentTemplates = { shouldCompile: false }'
  for (var name in templates) {
    var template = templates[name]
    if (!template) continue
    var compiled = hogan.compile(template, { asString: 1 })
    output += `\n HTMLComponentTemplates['${name}'] = new Hogan.Template(${compiled});`
  }
  return output
}

function transpileScripts(scripts) {
  var output = ''
  var babelOptions = { presets: [ 'es2015' ], plugins: [ 'iife-wrap' ] }
  for (var name in scripts) {
    var script = scripts[name]
    if (!script) continue
    var className = changeCase.pascalCase(name)
    // Ensure component is available on global namespace
    script = script.replace(`class ${className}`,
        `window.${className} = class ${className}`)
    var compiled = babel.transform(script, babelOptions).code
    output += '\n' + compiled
  }
  return output
}

function cssNext(styles) {
  var output = ''
  for (var name in styles) {
    var style = styles[name]
    if (!style) continue
    output += '\n' + style
  }
  output = postcss([postcssNext]).process(output).css
  return output
}
